/*
================================================================
  Set default parameters
================================================================

Any parameters provided by the user with a -params-file or
with -- command-line arguments will override the values
defined below.
*/
params {
    output_folder = "results"


    // Benchmarking parameters (leave empty to select all)
    selected_tools    = []
    selected_tasks    = []
    selected_datasets = []
    selected_metrics  = []


    // Define metrics [name]
    metric_accuracy = "accuracy"
    metric_cosine   = "cosine"
    metrics = [
      [metric_accuracy],
      [metric_cosine]
    ]


    // define datasets [name, type, path_or_URL]
    dtype_sc_rnaseq     = "Single cell RNAseq"
    dtype_sc_multiomic  = "Single cell multiomic"
    datasets = [
        ["example1", dtype_sc_rnaseq,     "/path/or/URL/to/dataset1.zip"],
        ["example2", dtype_sc_rnaseq,     "/path/or/URL/to/dataset2.zip"],
        ["example3", dtype_sc_multiomic,  "/path/or/URL/to/dataset3.zip"]
    ]

    
    // Perturbation tasks [name, compatible_metrics]
    task_digital_ko      = "Digital KOs"
    task_perturb_effect  = "True perturbation effects"
    task_unseen_events   = "unseen events"
    tasks = [
      [task_digital_ko,     metrics.collect{it}.flatten()],
      [task_perturb_effect, metrics.collect{it}.flatten()],
      [task_unseen_events,  metrics.collect{it}.flatten()]
    ]


    // Define tools [name, compatible_perturbation_tasks, compatible_dataset_types]
    tool_cell_oracle     = "CellOracle"
    tool_cell_ot         = "CellOT"
    tool_sc_tenifold_knk = "scTenifoldKnk"
    tools = [
      [
        tool_cell_oracle, 
        [task_digital_ko, task_perturb_effect], 
        [dtype_sc_rnaseq, dtype_sc_multiomic]],
      [
        tool_cell_ot, 
        [task_unseen_events],
        [dtype_sc_rnaseq]],
      [
        tool_sc_tenifold_knk,
        [task_digital_ko],
        [dtype_sc_rnaseq]]
    ]


    // Set the containers
    container__cell_oracle  = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    container__cell_ot      = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    container__sc_tenifold_knk = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    // container__d_spin       = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    // container__scing        = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    // container__gen_ki       = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    // container__scenic_plus  = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    
    container__preprocess_dataset = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    container__metrics            = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
    container__summarize          = "XXXXXXXXXXXXXXXXXXXXXXXXXXX"
}


/*
================================================================
  set profiles
================================================================
Set cpus/memory or create your own profile according
to your HPC
*/
profiles {
  singularity {
    singularity.autoMounts = true
    singularity.enabled = true
  }

  docker {
    docker.enabled = true
    docker.fixOwnership = true
  }

  slurm {
    process {
      executor = 'slurm'
      cpus = 1
      memory = '4 GB'
      time = '72h'
      beforeScript = 'ml singularity'

      withLabel: 'single_proc' {
        cpus = 1
        memory = 16.GB
      }

      withLabel: 'low_proc' {
        cpus = 2
        memory = 32.GB
      //  errorStrategy = 'ignore'
      }

      withLabel: 'high_mem' {
        cpus = 4
        memory = 370.GB
      }

      withLabel: 'med_proc' {
        cpus = 8
        memory = 64.GB
      }

      withLabel: 'high_proc' {
        cpus = 52
        memory = 370.GB
      }

    }
  }

  //TODO: add local profile

  debug { 
    process.beforeScript = 'echo $HOSTNAME' 
  }

  //TODO: add test profile
  /*test {
    params {
      datasets = [
        ["example1", dtype_sc_rnaseq,     "/path/or/URL/to/dataset1.zip"],
        ["example2", dtype_sc_rnaseq,     "/path/or/URL/to/dataset2.zip"],
        ["example3", dtype_sc_multiomic,  "/path/or/URL/to/dataset3.zip"]
      ]  
    }
  }*/
}

manifest {
        name = 'perturbBench workflow'
        author = ''
        homePage = ''
        mainScript = 'main.nf'
        nextflowVersion = '>=23.10'
        version = '1.0.0'
}


// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']


dag {
  enabled = true
  file = "${params.output_folder}/report/pipeline_dag.svg"
  overwrite = true
}
report {
  enabled = true
  file = "${params.output_folder}/report/execution_report.html"
  overwrite = true
}
timeline {
  enabled = true
  file = "${params.output_folder}/report/execution_timeline.html"
  overwrite = true
}
trace {
  enabled = true
  file = "${params.output_folder}/report/execution_trace.txt"
  overwrite = true
}


//nextflow.enable.moduleBinaries = true
